# a Treetop Grammar to parse a subset of the C language
#

grammar Cparse

  rule statement_list
	statement statement_list? 
  end
  rule statement
      comment 
    / var_decl 
    / ("if" '(' expr ')' then_statement "else " statement) 
    / ("if" '(' expr ')' statement )       
    / ("while" '(' expr ')' statement )
    / other_statement
  end
  rule comment
    '/*' (  [^*] / ('*' [^//]) )*  '*/'
  end
  rule var_decl
    type ' '* varitem var_list? ';'
  end
  rule type
      float pointer
    / int pointer
  end
  rule float
    "float"
  end
  rule int
    "int"
  end
  rule varitem
    pointer var assign?
  end
  rule pointer
    '*'*
  end
  rule digit
    [0-9]
  end
  rule nat
    digit digit*
  end
  rule ival
    nat / ('-' nat)
  end
  rule fval
      ([+-]? digit* '.'? digit* [eE] [+-]? nat )
    / ([+-]? digit* '.' nat) 
    / ([+-]? nat '.' digit*) 
    / ival
  end
  rule id
    [a-zA-Z_] [a-zA-Z_0-9]*
  end
  rule var
    id array*
  end
  rule array 
      ('[' ival ']') 
#    / ('[' ']') 
    / ('[' id ']')
  end
  rule assign
    '=' expr
  end
  rule var_list
    (',' varitem var_list?)
  end
  rule block
    '{' statement_list ' '* '}'
  end
  rule then_statement
       ("if" '(' expr ')' then_statement "else" then_statement )
    /  ("while" '(' expr ')' then_statment ) 
    / other_statement
  end
  rule other_statement
      block 
    / expr ';'
  end
  rule expr
      var '=' expr
    / or_expr
  end
  rule or_expr
      value '||' and_expr
    / and_expr
  end

  rule and_expr
      value '&&' value
    / equate_expr
  end

  rule equate_expr
      value '==' value
    / compare_expr
  end

  rule compare_expr
      value '<' value
    / value '>' value
    / add_expr
  end

  rule add_expr
      value '+' expr
    / value '-' expr
    / mult_expr
  end

  rule mult_expr
      value '/' expr
    / value '*' expr
    / unary_expr
  end

  rule unary_expr
      '!' expr
    / value
  end

  rule value
      var
    / fval
    / '(' expr ')'
  end
end

