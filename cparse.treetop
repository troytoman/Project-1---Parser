# a Treetop Grammar to parse a subset of the C language
#

grammar Cparse

  rule statement_list
	statement statement_list?
  end
  rule statement
      comment 
    / var_decl 
    / block 
    / ("if" ' '* '(' expr ')' ' '* statement )          
    / ("if" ' '* '(' expr ')' ' '* then_statement "else" ' '* statement)       
    / ( "while" ' '* '(' expr ')' ' '* statement )
    / expr ' '* ';'
  end
  rule comment
    '/*' (  [^*] / ('*' [^//]) )*  '*/'
  end
  rule var_decl
    type ' '* varitem var_list? ';'
  end
  rule type
      float pointer
    / int pointer
  end
  rule float
    "float"
  end
  rule int
    "int"
  end
  rule varitem
    pointer var assign?
  end
  rule pointer
    '*'*
  end
  rule digit
    [0-9]
  end
  rule nat
    digit digit*
  end
  rule ival
    nat / ('-' nat)
  end
  rule fval
    (digit* '.' nat) / (nat '.' digit*) / ival
  end
  rule id
    [a-zA-Z] [a-zA-Z_0-9]*
  end
  rule var
    id array*
  end
  rule array 
    ('[' ival ']') / ('[' ']') / ('[' id ']')
  end
  rule assign
    ' '* '=' ' '* fval
  end
  rule var_list
    (',' ' '* varitem var_list?)
  end
  rule block
    '{' ' '* statement_list ' '* '}'
  end
  rule then_statement
       ("if" '(' expr ')' ' '* then_statement "else" ' '* then_statement )
     / ("while" '(' expr ')' ' '* then_statment ) 
     / expr ' '* ';'
  end
  rule expr
      var '=' expr
    / value '<' value
    / value '>' value
    / value '==' value
    / value '&&' value
    / value '||' value
    / value '/' expr
    / value '*' expr
    / value '+' expr
    / value '-' expr
    / '!' expr
    / '(' expr ')'
    / value
  end
  rule value
      var
    / fval
  end
end

