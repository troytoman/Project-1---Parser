# a Treetop Grammar to parse a subset of the C language
#

grammar Cparse

  rule statement_list
	statement statement_list? <Statement>
  end
  rule statement
      var_decl 
    / "if" '(' expr ')' then_statement "else " statement <IfThenElse>
    / "if" '(' expr ')' statement        <IfThen>
    / "while" '(' expr ')' statement     <While>
    / other_statement 
  end
  rule var_decl
    type ' '* varitem var_list? ';' <VariableDeclaration>
  end
  rule type
      float pointer <TypeFloat>
    / int pointer <TypeInt>
  end
  rule float
    "float" 
  end
  rule int
    "int" 
  end
  rule varitem
    pointer var init? <VariableListItem>
  end
  rule pointer
    '*'* 
  end
  rule digit
    [0-9]
  end
  rule nat
    digit digit* #<IntegerLiteral>
  end
  rule ival
      digit digit*  <IntegerLiteral>
    / ('-' nat <IntegerLiteral>)  
  end
  rule fval
      [+-]? digit* '.'? digit* [eE] [+-]? digit digit*  <FloatLiteral>
    / [+-]? digit* '.' nat <FloatLiteral>
    / [+-]? nat '.' digit* <FloatLiteral>
    / ival 
  end
  rule id
    (!keyword [a-zA-Z_] ) [a-zA-Z_0-9]* #<Identifier>
  end
  rule keyword
    "if"
  / "else"
  / "while"
  / "for"
  / "int"
  / "float"
  end
  rule var
    id array* <Variable>
  end
  rule array 
      ('[' ival ']') 
    / ('[' id ']')
  end
  rule init
    '=' expr <Init>
  end
  rule var_list
    ',' varitem var_list? <VarList>
  end
  rule block
    '{' statement_list ' '* '}' <Block>
  end
  rule then_statement
       ("if" '(' expr ')' then_statement "else" then_statement )
    /  ("while" '(' expr ')' then_statment ) 
    / other_statement
  end
  rule other_statement
      block
    / expr ';' <Statement>
  end
  rule expr
      var '=' expr <AssignmentExpression>
    / or_expr
  end
  rule or_expr
      value '||' and_expr <OrExpression>
    / and_expr
  end

  rule and_expr
      value '&&' value <AndExpression>
    / equate_expr
  end

  rule equate_expr
      value '==' value <EquateExpression>
    / compare_expr
  end

  rule compare_expr
      value '<' value <LTExpression>
    / value '>' value <GTExpression>
    / add_expr
  end

  rule add_expr
      value '+' expr <AddExpression>
    / value '-' expr <MinusExpression>
    / mult_expr
  end

  rule mult_expr
      value '/' expr <DivExpression>
    / value '*' expr <MultExpression>
    / unary_expr
  end

  rule unary_expr
      '!' expr  <NotExpression>
    / value
  end

  rule value
      var
    / fval
    / '(' expr ')' <ParenExpression>
  end
end

