# a Treetop Grammar to parse a subset of the C language
# for CS5363 Programming Languages and Compilers - Fall 2010
# Troy Toman

grammar Cparse

  rule statement_list
	statement statement_list? <Statement>
  end
  rule statement
      var_decl 
    / "if" '(' ex ')' then_statement "else " statement <IfThenElse>
    / "if" '(' ex ')' statement        <IfThen>
    / "while" '(' ex ')' statement     <While>
    / other_statement 
  end
  rule var_decl
    type ' '* varitem var_list? ';' <VariableDeclaration>
  end
  rule type
      float pointer <TypeFloat>
    / int pointer <TypeInt>
  end
  rule float
    "float" 
  end
  rule int
    "int" 
  end
  rule varitem
    pointer var init? <VariableListItem>
  end
  rule pointer
    '*'* 
  end
  rule digit
    [0-9]
  end
  rule nat
    digit digit* 
  end
  rule ival
      digit digit*  <IntegerLiteral>
    / ('-' nat <IntegerLiteral>)  
  end
  rule fval
      [+-]? digit* '.'? digit* [eE] [+-]? digit digit*  <FloatLiteral>
    / [+-]? digit* '.' nat <FloatLiteral>
    / [+-]? nat '.' digit* <FloatLiteral>
    / ival 
  end
  rule id
    (!keyword [a-zA-Z_] ) [a-zA-Z_0-9]* #<Variable>
  end
  rule keyword
    "if"
  / "else"
  / "while"
  / "for"
  / "int"
  / "float"
  end
  rule var
      id array* <Variable>
  end
  rule array 
      '[' ival ']' 
    / '[' id ']' <ArrayVariableIndex>
  end
  rule init
    '=' ex <Init>
  end
  rule var_list
    ',' varitem var_list? <VarList>
  end
  rule block
    '{' statement_list ' '* '}' <Block>
  end
  rule then_statement
       "if" '(' ex ')' then_statement "else" then_statement
    /  "while" '(' ex ')' then_statment 
    / other_statement
  end
  rule other_statement
      block
    / ex ';' <Statement>
  end

  rule ex
    expr / or
  end

  rule expr
      or '=' ex <AssignmentExpression>
#    / or_expr
  end
  
  rule or
    or_expr / and
  end

  rule or_expr
      and '||' or <OrExpression>
#    / and_expr
  end

  rule and
    and_expr / equate
  end 

  rule and_expr
      equate '&&' and <AndExpression>
#    / equate_expr
  end

  rule equate
    equate_expr / comp
  end

  rule equate_expr
      comp '==' equate <EquateExpression>
#    / compare_expr
  end

  rule comp
    compare_expr / term
  end

  rule compare_expr
      term '<' comp <LTExpression>
    / term '>' comp <GTExpression>
#    / add_expr
  end

  rule term
    add_expr / factor
  end

  rule add_expr
      factor '+' term <AddExpression>
    / factor '-' term <MinusExpression>
#    / mult_expr
  end

  rule factor
    mult_expr / unary
  end

  rule mult_expr
      unary '/' factor <DivExpression>
    / unary '*' factor <MultExpression>
#    / unary_expr
  end

  rule unary
    unary_expr / group
  end

  rule unary_expr
      '!' unary  <NotExpression>
#    / value
  end
  
  rule group
    paren / value
  end

  rule paren 
    '(' or ')' <ParenExpression>
  end

  rule value
      var
    / fval
    / ival
#    / '(' ex ')' <ParenExpression>
  end
end

